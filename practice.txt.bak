#include <ctime>
#include <vector>
#include <iostream>
using namespace std;

template<class T>
void shellSort(const vector<T>& source, vector<T>& target)
{
    int gap = target.size()/2;
    target = source;// the single copy operation
    bool sorted = false;
    int temp;
    while( true ){
	sorted = true;
	int st = 0;
	 for( int x = gap; x < target.size() ; x += gap )
	    {
		if( target[st] > target[x] )
		{ 
		temp = target[st];
		target[st]=target[x];
		target[x]=temp;
		sorted = false; 
		}
		st = x;
	    }
	}
    }
    return;
}
    void swap( int& a, int& b ) { int t = a; a = b; b = t; }

int main()
{
   srand(time(NULL));
   unsigned int i;
    23 14 6 7 6 9 3 24 10 11 1 2 18 12 19 18 4 11 15 19 23 12 24 21 13
   vector<int> nums;
       nums.push_back(23);   
       nums.push_back(14); 
       nums.push_back(6); 
       nums.push_back(7); 
       nums.push_back(6); 
       nums.push_back(9); 
       nums.push_back(3); 
       nums.push_back(24); 
       nums.push_back(10); 
       nums.push_back(1); 
       nums.push_back(2); 
       nums.push_back(18); 
       nums.push_back(12); 
       nums.push_back(19); 
       nums.push_back(18); 
       nums.push_back(4); 
       nums.push_back(11); 
       nums.push_back(15); 
       nums.push_back(19); 
       nums.push_back(23); 
       nums.push_back(12); 
       nums.push_back(24);
       nums.push_back(21);
       nums.push_back(13);
   
   cout<<"The array before sorting: ";           
   for(i = 0; i<nums.size(); i++)
       cout << nums[i] << " ";

   vector<int> sortedNums;
   shellSort( nums, sortedNums );// passing both by reference
   
   cout<<endl<<"A sorted copy of the array: ";           
   for(i = 0; i<sortedNums.size(); i++)
       cout <<  sortedNums[i] << " ";   

   cout << endl;
   return 0;
}


void shellSort(vector<Wrd>& V, int start, int stop)
{
    bool flag = true;
    Wrd temp;
 
    while( flag || (stop > 1))
    {
        flag = false;
        stop = (stop + 1) / 2;
        int loopend = V.size()-stop;
        int startstop = start+stop;
        for (start = 0; start < loopend; start++)
        {
            if (compare(V[startstop], V[start]))
            {
                temp = V[startstop]; 
                V[startstop] = V[start]; 
                V[start] = temp; 
                totalMoves+=3;
                flag = true;
            }
        }
    }
    return;
}