http://www.cplusplus.com/forum/beginner/43676/

http://codereview.stackexchange.com/questions/47184/insertion-sorting-in-c   for theory writing

used --- > http://codereview.stackexchange.com/questions/110793/insertion-sort-in-c

#include <ctime>
#include <vector>
#include <iostream>
using namespace std;

template<class T>
void insertSort(const vector<T>& source, vector<T>& target)
{
    target = source;// the single copy operation
    int maxIdx;    
    for(unsigned int i = 0; i<target.size()-1;i++)
    {
        maxIdx = i;        
        for(unsigned int j = i+1; j<target.size();j++)
           if(target[j] > target[maxIdx])
	         maxIdx = j;

        // swap elements
        if( maxIdx != i )
	{
		T temp = target[i];
		target[i] = target[maxIdx];
		target[maxIdx] = temp;
	}
    }    
    return;
}

int main()
{
   srand(time(NULL));
   unsigned int i;
   
   vector<int> nums;
   
   for(i = 0; i < 10; i++)
       nums.push_back(rand()%10 + 1);   
   
   cout<<"The array before sorting: ";           
   for(i = 0; i<nums.size(); i++)
       cout << nums[i] << " ";

   vector<int> sortedNums;
   insertSort( nums, sortedNums );// passing both by reference
   
   cout<<endl<<"A sorted copy of the array: ";           
   for(i = 0; i<sortedNums.size(); i++)
       cout <<  sortedNums[i] << " ";   

   cout << endl;
   return 0;
}

----------------------------------------------------------------------------------------------------------------
used for insertion sort--- > http://codereview.stackexchange.com/questions/110793/insertion-sort-in-c
#include <iostream>
#include <cstdlib>

void insertion_sort(int arr[], int length);
void print_array(int array[],int size);

int main()
{
    int array[] = {4,6,3,7,5,9,2,8,1,10};
    insertion_sort(array,10);
    print_array(array,10);
    return 0;
}

void insertion_sort(int arr[], int length)
{
    int i,j,tmp;
    for (i = 1; i < length; i++) {
        j = i;
        while (j > 0 && arr[j - 1] > arr[j]) {
            tmp = arr[j];
            arr[j] = arr[j - 1];
            arr[j - 1] = tmp;
            j--;
        }
    }
}

void print_array(int array[], int size)
{
    int j;
    for (j = 0; j < size; j++)
    {
        std::cout << array[j] << std::endl;
    }
}
------------------------------------------------------------------------insertion sort end----------------------------------------------------------

used for shellsortsuboptimal - http://www.cplusplus.com/forum/general/123961/

void shellsort(int v[], int n)

{

    int gap, i, j, temp;



    for (gap = n/2; gap > 0; gap /= 2)

        for (i = gap; i < n; i++)

            for (j=i-gap; j>=0 && v[j]>v[j+gap]; j-=gap) {

                temp = v[j];

                v[j] = v[j+gap];

                v[j+gap] = temp;

            }

}

--------------------------------------------------------------------------------------------------------------------

#include <ctime>
#include <vector>
#include <iostream>
using namespace std;

template<class T>
void shellSort(const vector<T>& source, vector<T>& target)
{
    target = source;// the single copy operation
    int n = target.size();
    for (int gap = n/2; gap > 0; gap /= 2)
    {
        // Do a gapped insertion sort for this gap size.
        // The first gap elements a[0..gap-1] are already in gapped order
        // keep adding one more element until the entire array is
        // gap sorted 
        for (int i = gap; i < n; i += 1)
        {
            // add a[i] to the elements that have been gap sorted
            // save a[i] in temp and make a hole at position i
            int temp = target[i];
 
            // shift earlier gap-sorted elements up until the correct 
            // location for a[i] is found
            int j;            
            for (j = i; j >= gap && target[j - gap] > temp; j -= gap)
                target[j] = target[j - gap];
             
            //  put temp (the original a[i]) in its correct location
            target[j] = temp;
        }
    }
    return;
}

int main()
{
   srand(time(NULL));
   unsigned int i;
   vector<int> nums;
       nums.push_back(23);   
       nums.push_back(14); 
       nums.push_back(6); 
       nums.push_back(7); 
       nums.push_back(6); 
       nums.push_back(9); 
       nums.push_back(3); 
       nums.push_back(24); 
       nums.push_back(10); 
       nums.push_back(1); 
       nums.push_back(2); 
       nums.push_back(18); 
       nums.push_back(12); 
       nums.push_back(19); 
       nums.push_back(18); 
       nums.push_back(4); 
       nums.push_back(11); 
       nums.push_back(15); 
       nums.push_back(19); 
       nums.push_back(23); 
       nums.push_back(12); 
       nums.push_back(24);
       nums.push_back(21);
       nums.push_back(13);
   
   cout<<"The array before sorting: ";           
   for(i = 0; i<nums.size(); i++)
       cout << nums[i] << " ";

   vector<int> sortedNums;
   shellSort( nums, sortedNums );// passing both by reference
   
   cout<<endl<<"A sorted copy of the array: ";           
   for(i = 0; i<sortedNums.size(); i++)
       cout <<  sortedNums[i] << " ";   

   cout << endl;
   return 0;
}

important url -http://codereview.stackexchange.com/questions/4582/sorting-algorithms-implemented-in-c

-----------------------------------------------------------------------------------------------------------

used for shellsortoptimal - http://www.cplusplus.com/forum/general/123961/
https://www.tutorialspoint.com/data_structures_algorithms/shell_sort_program_in_c.htm

#include <ctime>
#include <vector>
#include <iostream>
using namespace std;

template<class T>
void shellSort(const vector<T>& source, vector<T>& target)
{
    int i,j,temp;
    target = source;// the single copy operation
    int n = target.size();
    int gap = 1;   

   while(gap <= n/3) {
      gap = gap*3 +1;
   }
    while(gap > 0) {
        printf("\n%d\n",gap);
        if( gap < n )
        for( int i = gap ; i < n; ++i )
            for ( int j = i-gap ; j >= 0 && target[j] > target[j+gap] ; j -= gap )
                std::swap( target[j], target[j+gap] ) ;
                gap = (gap -1) /3;
    }
    return;
}

int main()
{
   srand(time(NULL));
   unsigned int i;
   vector<int> nums={4, 6, 3, 2, 1, 9, 7};
/*       nums.push_back(23);   
       nums.push_back(14); 
       nums.push_back(6); 
       nums.push_back(7); 
       nums.push_back(6); 
       nums.push_back(9); 
       nums.push_back(3); 
       nums.push_back(24); 
       nums.push_back(10); 
        nums.push_back(11); 
       nums.push_back(1); 
       nums.push_back(2); 
       nums.push_back(18); 
       nums.push_back(12); 
       nums.push_back(19); 
       nums.push_back(18); 
       nums.push_back(4); 
       nums.push_back(11); 
       nums.push_back(15); 
       nums.push_back(19); 
       nums.push_back(23); 
       nums.push_back(12); 
       nums.push_back(24);
       nums.push_back(21);
       nums.push_back(13);*/
   
   cout<<"The array before sorting: ";           
   for(i = 0; i<nums.size(); i++)
       cout << nums[i] << " ";

   vector<int> sortedNums;
   shellSort( nums, sortedNums );// passing both by reference
   
   cout<<endl<<"A sorted copy of the array: ";           
   for(i = 0; i<sortedNums.size(); i++)
       cout <<  sortedNums[i] << " ";   

   cout << endl;
   return 0;
}
---------------------------------------------------------------------------------------------------------------------
used for quicksort

